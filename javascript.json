{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"backendExpressInit":{
		"prefix":"backendExpressInit", 
		"body": [
			"import express, { request, response } from 'express';import cors from'cors';import morgan from 'morgan';constapp = express();app.set('Port', 4000);app.use(morgan('dev'));app.use(cors({ origin: '*' }));app.use(express.urlencoded({ extened: true }));app.use(express.json());app.use('/usuarios', userRoute);app.listen(app.get('Port'), () => {console.log('sevidor escuando por el puerto', app.get('Port'));});"
				
		],
		"description": "este snippet sirve para crear la configuracion inicial de un baclend cone express"
	},
	"backendExpressRoute":{
		"prefix": "backendExpressRoute",
		"body": [
			"import { Router } from 'express';const route=Router();route.get('/', ejemploRuta);export default route;"
			
		],
		"description": "este snippet sirve para crear rutas conexpress"
	},
	"backendExpressResponse":{
		"prefix": "backendExpressResponse",
		"body" :[
			"export const response = (res, statusCode, ok, data, message) => {res.status(statusCode).json({ok,data,message,});};"
		],
		"description": "este snippet sirve para crear la funcion response "
	}
}


